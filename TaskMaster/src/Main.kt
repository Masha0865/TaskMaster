import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.DateTimeParseException
import java.util.Locale

// =========================
// Data Layer
// =========================

data class Task(
    val id: Int,
    var title: String,
    var description: String?,
    var priority: String,
    var dueDate: String,
    var isCompleted: Boolean,
    var category: String,
    val createdAt: String
)

private val validPriorities: List<String> = listOf(
    "–ù–∏–∑–∫–∏–π üîµ",
    "–°—Ä–µ–¥–Ω–∏–π üü°",
    "–í—ã—Å–æ–∫–∏–π üü†",
    "–°—Ä–æ—á–Ω—ã–π üî¥"
)

private val validCategoriesDefault: List<String> = listOf(
    "–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–£—á–µ–±–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–§–∏–Ω–∞–Ω—Å—ã"
)

private val dateFmt: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")

private var nextId: Int = 1
private val tasks: MutableList<Task> = mutableListOf()
private val categories: MutableSet<String> = validCategoriesDefault.toMutableSet()

// Helpers
private fun todayString(): String = LocalDate.now().format(dateFmt)

private fun parseDateOrNull(text: String): LocalDate? = try {
    LocalDate.parse(text, dateFmt)
} catch (_: DateTimeParseException) { null }

// =========================
// Validation
// =========================

private fun isValidTitle(title: String): Boolean = title.isNotBlank()

private fun isValidPriority(priority: String): Boolean = validPriorities.contains(priority)

private fun isValidDueDate(due: String): Boolean = parseDateOrNull(due) != null

private fun ensureCategoryExists(cat: String): String {
    if (cat.isBlank()) return "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    categories.add(cat)
    return cat
}

// =========================
// Business Logic
// =========================

private fun createTask(
    title: String,
    description: String?,
    priority: String,
    dueDate: String,
    category: String
): Result<Task> {
    if (!isValidTitle(title)) return Result.failure(IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"))
    if (!isValidPriority(priority)) return Result.failure(IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"))
    if (!isValidDueDate(dueDate)) return Result.failure(IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ (dd.MM.yyyy)"))

    val created = Task(
        id = nextId++,
        title = title.trim(),
        description = description?.ifBlank { null },
        priority = priority,
        dueDate = dueDate,
        isCompleted = false,
        category = ensureCategoryExists(category.trim()),
        createdAt = todayString()
    )
    tasks.add(created)
    return Result.success(created)
}

private fun listTasks(): List<Task> = tasks.toList()

private fun findTaskById(id: Int): Task? = tasks.firstOrNull { it.id == id }

private fun updateTask(
    id: Int,
    title: String?,
    description: String?,
    priority: String?,
    dueDate: String?,
    category: String?
): Result<Task> {
    val task = findTaskById(id) ?: return Result.failure(NoSuchElementException("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    if (task.isCompleted) return Result.failure(IllegalStateException("–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É"))

    title?.let {
        if (!isValidTitle(it)) return Result.failure(IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"))
        task.title = it.trim()
    }
    if (description != null) task.description = description.ifBlank { null }
    priority?.let {
        if (!isValidPriority(it)) return Result.failure(IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"))
        task.priority = it
    }
    dueDate?.let {
        if (!isValidDueDate(it)) return Result.failure(IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ (dd.MM.yyyy)"))
        task.dueDate = it
    }
    category?.let { task.category = ensureCategoryExists(it.trim()) }
    return Result.success(task)
}

private fun deleteTask(id: Int, confirm: Boolean): Result<Unit> {
    if (!confirm) return Result.failure(IllegalStateException("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"))
    val removed = tasks.removeIf { it.id == id }
    return if (removed) Result.success(Unit) else Result.failure(NoSuchElementException("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
}

private fun markCompleted(id: Int): Result<Task> {
    val task = findTaskById(id) ?: return Result.failure(NoSuchElementException("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    task.isCompleted = true
    return Result.success(task)
}

// Filters & Search
private enum class StatusFilter { ALL, ACTIVE, DONE }

private fun filterByStatus(status: StatusFilter): List<Task> = when (status) {
    StatusFilter.ALL -> tasks
    StatusFilter.ACTIVE -> tasks.filter { !it.isCompleted }
    StatusFilter.DONE -> tasks.filter { it.isCompleted }
}

private fun search(text: String): List<Task> {
    if (text.isBlank()) return tasks
    val q = text.trim().lowercase(Locale.getDefault())
    return tasks.filter { t ->
        t.title.lowercase(Locale.getDefault()).contains(q) ||
                (t.description?.lowercase(Locale.getDefault())?.contains(q) == true)
    }
}

private fun filterByCategory(cat: String): List<Task> = tasks.filter { it.category.equals(cat, ignoreCase = true) }

private fun filterByPriority(p: String): List<Task> = tasks.filter { it.priority == p }

private fun overdue(): List<Task> {
    val today = LocalDate.now()
    return tasks.filter { !it.isCompleted && (parseDateOrNull(it.dueDate)?.isBefore(today) == true) }
}

// Analytics
private data class Stats(
    val total: Int,
    val done: Int,
    val active: Int,
    val completionPercent: Int,
    val byPriority: Map<String, Int>,
    val byCategory: Map<String, Int>,
    val overdueCount: Int
)

private fun computeStats(): Stats {
    val total = tasks.size
    val done = tasks.count { it.isCompleted }
    val active = total - done
    val completionPercent = if (total == 0) 0 else (done * 100 / total)
    val byPriority = validPriorities.associateWith { p -> tasks.count { it.priority == p } }
    val byCategory = categories.associateWith { c -> tasks.count { it.category.equals(c, ignoreCase = true) } }
    val overdueCount = overdue().size
    return Stats(total, done, active, completionPercent, byPriority, byCategory, overdueCount)
}

// =========================
// Presentation Layer
// =========================

private fun printHeader(title: String) {
    println("\n=== $title ===")
}

private fun formatTask(t: Task): String {
    val statusEmoji = if (t.isCompleted) "‚úÖ" else "üü©"
    val idStr = "#" + t.id.toString().padStart(4, '0')
    val title = t.title
    val pr = t.priority
    val cat = t.category
    val due = t.dueDate
    val created = t.createdAt
    val desc = t.description ?: "‚Äî"
    return "$statusEmoji $idStr | $title | $pr | $cat | –¥–æ $due | —Å–æ–∑–¥–∞–Ω–æ $created | $desc"
}

private fun printTasks(items: List<Task>) {
    if (items.isEmpty()) {
        println("(–ø—É—Å—Ç–æ)")
        return
    }
    println("–°—Ç–∞—Ç—É—Å  | ID   | –ù–∞–∑–≤–∞–Ω–∏–µ | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –°—Ä–æ–∫ | –°–æ–∑–¥–∞–Ω–æ | –û–ø–∏—Å–∞–Ω–∏–µ")
    println("-".repeat(100))
    items.forEach { println(formatTask(it)) }
}

private fun prompt(text: String): String {
    print("$text: ")
    return readLine()?.trim().orEmpty()
}

private fun promptYesNo(text: String): Boolean {
    val ans = prompt("$text (y/n)").lowercase(Locale.getDefault())
    return ans == "y" || ans == "yes" || ans == "–¥" || ans == "–¥–∞"
}

private fun chooseFromList(title: String, options: List<String>): String {
    println(title)
    options.forEachIndexed { idx, s -> println("${idx + 1}. $s") }
    val idx = prompt("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä").toIntOrNull()
    return if (idx != null && idx in 1..options.size) options[idx - 1] else options.first()
}

private fun menu() {
    while (true) {
        println()
        println("TaskMaster ‚Äî –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏")
        println("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        println("2. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        println("3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
        println("4. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
        println("5. –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
        println("6. –ü–æ–∏—Å–∫ / –§–∏–ª—å—Ç—Ä—ã")
        println("7. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        println("0. –í—ã—Ö–æ–¥")

        when (prompt("–í–∞—à –≤—ã–±–æ—Ä").toIntOrNull()) {
            1 -> uiAddTask()
            2 -> uiListTasks()
            3 -> uiEditTask()
            4 -> uiDeleteTask()
            5 -> uiCompleteTask()
            6 -> uiSearchFilters()
            7 -> uiAnalytics()
            0 -> return
            else -> println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
        }
    }
}

private fun uiAddTask() {
    printHeader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    val title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ")
    val description = prompt("–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)").ifBlank { null }
    val priority = chooseFromList("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", validPriorities)
    val catInput = prompt("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–ª–∏ –Ω–æ–≤–∞—è)")
    val due = prompt("–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (dd.MM.yyyy)")
    val res = createTask(title, description, priority, due, catInput)
    res.onSuccess { println("–°–æ–∑–¥–∞–Ω–æ: ${formatTask(it)}") }
        .onFailure { println("–û—à–∏–±–∫–∞: ${it.message}") }
}

private fun uiListTasks() {
    printHeader("–í—Å–µ –∑–∞–¥–∞—á–∏")
    val grouped = listTasks().groupBy { it.category }
    if (grouped.isEmpty()) {
        println("–ó–∞–¥–∞—á –Ω–µ—Ç")
        return
    }
    grouped.keys.sorted().forEach { cat ->
        println("\n‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—è: $cat ‚Äî")
        printTasks(grouped[cat]!!.sortedBy { it.id })
    }
}

private fun uiEditTask() {
    printHeader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    val id = prompt("ID –∑–∞–¥–∞—á–∏").toIntOrNull()
    if (id == null) {
        println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        return
    }
    val title = prompt("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—É—Å—Ç–æ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å)").ifBlank { null }
    val descriptionRaw = prompt("–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—É—Å—Ç–æ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å, '-' ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å)")
    val description = when {
        descriptionRaw == "-" -> ""
        descriptionRaw.isBlank() -> null
        else -> descriptionRaw
    }
    val changePriority = promptYesNo("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç?")
    val priority = if (changePriority) chooseFromList("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", validPriorities) else null
    val due = prompt("–ù–æ–≤–∞—è –¥–∞—Ç–∞ (dd.MM.yyyy, –ø—É—Å—Ç–æ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å)").ifBlank { null }
    val cat = prompt("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø—É—Å—Ç–æ ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å)").ifBlank { null }
    val res = updateTask(id, title, description, priority, due, cat)
    res.onSuccess { println("–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatTask(it)}") }
        .onFailure { println("–û—à–∏–±–∫–∞: ${it.message}") }
}

private fun uiDeleteTask() {
    printHeader("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    val id = prompt("ID –∑–∞–¥–∞—á–∏").toIntOrNull()
    if (id == null) {
        println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        return
    }
    val confirmed = promptYesNo("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å?")
    val res = deleteTask(id, confirmed)
    res.onSuccess { println("–£–¥–∞–ª–µ–Ω–æ") }
        .onFailure { println("–û—à–∏–±–∫–∞: ${it.message}") }
}

private fun uiCompleteTask() {
    printHeader("–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
    val id = prompt("ID –∑–∞–¥–∞—á–∏").toIntOrNull()
    if (id == null) {
        println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        return
    }
    val res = markCompleted(id)
    res.onSuccess { println("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${formatTask(it)}") }
        .onFailure { println("–û—à–∏–±–∫–∞: ${it.message}") }
}

private fun uiSearchFilters() {
    printHeader("–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã")
    println("1. –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É")
    println("2. –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É")
    println("3. –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    println("4. –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É")
    println("5. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    when (prompt("–í–∞—à –≤—ã–±–æ—Ä").toIntOrNull()) {
        1 -> {
            val q = prompt("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–æ–ø–∏—Å–∞–Ω–∏—é")
            printTasks(search(q))
        }
        2 -> {
            val s = chooseFromList("–°—Ç–∞—Ç—É—Å", listOf("–í—Å–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"))
            val status = when (s) {
                "–ê–∫—Ç–∏–≤–Ω—ã–µ" -> StatusFilter.ACTIVE
                "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" -> StatusFilter.DONE
                else -> StatusFilter.ALL
            }
            printTasks(filterByStatus(status))
        }
        3 -> {
            val cat = prompt("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
            printTasks(filterByCategory(cat))
        }
        4 -> {
            val p = chooseFromList("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", validPriorities)
            printTasks(filterByPriority(p))
        }
        5 -> printTasks(overdue())
        else -> println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
    }
}

private fun uiAnalytics() {
    printHeader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    val s = computeStats()
    println("–í—Å–µ–≥–æ: ${s.total}")
    println("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${s.done}")
    println("–ê–∫—Ç–∏–≤–Ω—ã–µ: ${s.active}")
    println("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${s.completionPercent}%")
    println("\n–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
    s.byPriority.forEach { (p, c) -> println("$p: $c") }
    println("\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    s.byCategory.forEach { (c, n) -> println("$c: $n") }
    println("\n–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ: ${s.overdueCount}")
}

fun main() {

    menu()
}